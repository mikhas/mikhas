<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Quite Meticulous Logic - Starter Kit</title><link href="https://quitemeticulouslogic.com/" rel="alternate"></link><link href="https://quitemeticulouslogic.com/feeds/starter-kit.atom.xml" rel="self"></link><id>https://quitemeticulouslogic.com/</id><updated>2024-09-08T00:00:00+02:00</updated><entry><title>Beginner's guide to property bindings</title><link href="https://quitemeticulouslogic.com/property-bindings-101.html" rel="alternate"></link><published>2024-09-08T00:00:00+02:00</published><updated>2024-09-08T00:00:00+02:00</updated><author><name>Michael Hasselmann</name></author><id>tag:quitemeticulouslogic.com,2024-09-08:/property-bindings-101.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In QML, state propagates through properties. They can be linked to expressions,
thus forming property bindings. In the simplest case, the linked expression is
another property. Whenever its stored value changes, bound properties get
notified so they can react to these changes. This mechanism is known as &lt;cite&gt;Active
Updating …&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In QML, state propagates through properties. They can be linked to expressions,
thus forming property bindings. In the simplest case, the linked expression is
another property. Whenever its stored value changes, bound properties get
notified so they can react to these changes. This mechanism is known as &lt;cite&gt;Active
Updating&lt;/cite&gt; &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. Property bindings allow us to establish communication channels
between objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="property-bindings"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Property bindings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are some quick examples of property bindings. We can see how the left-hand
side — the bound property — reads its value from the right-hand expression.&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="k"&gt;propA:&lt;/span&gt; &lt;span class="nx"&gt;propB&lt;/span&gt;                        &lt;span class="c1"&gt;// propA reads the value of propB whenever it changes
&lt;/span&gt;&lt;span class="k"&gt;propC:&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;                           &lt;span class="c1"&gt;// propC reads the value '37' once
&lt;/span&gt;&lt;span class="k"&gt;propD:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;propE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;propF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="c1"&gt;// propD reads the return value of the code block
&lt;/span&gt;                                    &lt;span class="c1"&gt;// whenever either propE or propF changes
&lt;/span&gt;&lt;span class="k"&gt;propE:&lt;/span&gt; &lt;span class="nx"&gt;propE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;propF&lt;/span&gt;                &lt;span class="c1"&gt;// shorthand for the above
&lt;/span&gt;&lt;span class="k"&gt;propG:&lt;/span&gt; &lt;span class="nx"&gt;cond&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;propE&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;propF :&lt;/span&gt; &lt;span class="nx"&gt;propG&lt;/span&gt; &lt;span class="c1"&gt;// read value of `propE + propF` whenever cond becomes
&lt;/span&gt;                                    &lt;span class="c1"&gt;// true, otherwise keep the value of propG unchanged
&lt;/span&gt;&lt;span class="k"&gt;propH:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// propH is bound to an anonymous function and can
&lt;/span&gt;                                    &lt;span class="c1"&gt;// be called like a function now&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In contrast, this is a property assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;propA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;propB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can find assignments in JavaScript expressions, and they have a destructive
side effect: They replace &lt;tt class="docutils literal"&gt;propA&lt;/tt&gt;'s original property binding with a one-time
value assignment, and &lt;tt class="docutils literal"&gt;propA&lt;/tt&gt; will no longer update when &lt;tt class="docutils literal"&gt;propB&lt;/tt&gt; changes.&lt;/p&gt;
&lt;p&gt;We generally prefer property bindings over assignments to avoid the surprise of
breaking bindings by accident. Even a formerly unbound property might become
bound in a quick refactor, and the property assignment that worked fine
initially will now cause a bug.&lt;/p&gt;
&lt;div class="section" id="more-ways-to-bind"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;More ways to bind&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In JavaScript, we cannot use the regular property binding syntax. Instead we
assign a &lt;tt class="docutils literal"&gt;Qt.binding&lt;/tt&gt; instance, which accepts a callback as parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;propD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;propE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;propF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes, we want to express conditional bindings, or have to switch between
multiple bindings, carefully activating one at a time. The &lt;tt class="docutils literal"&gt;Binding&lt;/tt&gt;
QML type &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt; makes this possible:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;
    &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;"gold"&lt;/span&gt;

    &lt;span class="nx"&gt;TapHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;id: tapHandler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;Binding&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;when:&lt;/span&gt; &lt;span class="nx"&gt;tapHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tapCount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;value:&lt;/span&gt; &lt;span class="s2"&gt;"teal"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;Binding&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;when:&lt;/span&gt; &lt;span class="nx"&gt;tapHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tapCount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="k"&gt;value:&lt;/span&gt; &lt;span class="s2"&gt;"hotpink"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;Binding&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;when:&lt;/span&gt; &lt;span class="nx"&gt;tapHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tapCount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="k"&gt;value:&lt;/span&gt; &lt;span class="s2"&gt;"honeydew"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;anchors.centerIn:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
        &lt;span class="k"&gt;text:&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="k"&gt;count:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tapHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tapCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here, the &lt;tt class="docutils literal"&gt;color&lt;/tt&gt; property of &lt;tt class="docutils literal"&gt;Rectangle&lt;/tt&gt; has not three but four bindings:
The initial value, "gold" and the three &lt;tt class="docutils literal"&gt;Binding&lt;/tt&gt; instances, each with their
own value for the &lt;tt class="docutils literal"&gt;color&lt;/tt&gt; property. It would be four even, as the default
value of the property still counts as a binding.&lt;/p&gt;
&lt;p&gt;As we can guess from the code, the &lt;tt class="docutils literal"&gt;color&lt;/tt&gt; property cycles depending on
whether we manage to double-, triple- or quadruple-tap the rectangle before it
reverts back to &lt;tt class="docutils literal"&gt;color: "gold"&lt;/tt&gt; once the &lt;tt class="docutils literal"&gt;tapCount&lt;/tt&gt; resets.&lt;/p&gt;
&lt;p&gt;We are responsible for making sure that each of the &lt;tt class="docutils literal"&gt;when&lt;/tt&gt; conditions define a
unique state. If more than one binding is active, we have to consider the
behaviour undefined.&lt;/p&gt;
&lt;p&gt;The above example could easily be replaced with a switch statement in a
JavaScript expression, but when more complex property bindings are involved, the
declarative approach will be easier to maintain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="properties"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Properties&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that we've seen the basics of property bindings, we should take a closer
look at properties again. They form the primary interface for QML types. Once
bound and linked to other properties or property-dependent expressions, we get
to enjoy their versatility in full.&lt;/p&gt;
&lt;div class="section" id="reacting-to-property-changes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;Reacting to property changes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Each property comes with its own &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;on...Changed&lt;/span&gt;&lt;/tt&gt; signal. Attaching a slot to
the signal looks strangely similar to a property binding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;someProperty:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;onSomePropertyChanged:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"someProperty now reads"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;someProperty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The right-hand side will be run whenever &lt;tt class="docutils literal"&gt;someProperty&lt;/tt&gt; changes.&lt;/p&gt;
&lt;p&gt;In rare situations, we cannot directly attach to the signal. In those cases, we
can use a &lt;tt class="docutils literal"&gt;Connections&lt;/tt&gt; object instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Connections&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;target:&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;
   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onCountChanged&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we attach to a signal inside the target, but technically we also break
encapsulation by reaching through objects. Use of &lt;tt class="docutils literal"&gt;Connections&lt;/tt&gt; components are
almost always workarounds and can be avoided by breaking down components and
properties even further.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qualifiers-and-how-to-use-them"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;Qualifiers and how to use them&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is the shortened syntax for defining a property:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;property&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="o"&gt;::=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;reqProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; | &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;rdProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; | &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;defProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;reqProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;::=&lt;/span&gt; "required property " &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;rdProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;::=&lt;/span&gt; "readonly property " &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;specifier&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; ": " &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;defProperty&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;::=&lt;/span&gt; ( "default " )? "property " &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                  ( ": " &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; )?
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;specifier&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="o"&gt;::=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; | "alias "
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="o"&gt;::=&lt;/span&gt; "var " | "int " | "real " | "string " | "list&amp;lt;" &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; "&amp;gt; " | &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;qmlType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The definition of &lt;tt class="docutils literal"&gt;&amp;lt;identifier&amp;gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&amp;lt;expression&amp;gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;lt;qmlType&amp;gt;&lt;/tt&gt; is left
as exercise, but this grammar eventually accepts these definitions, and more:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Control&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;id: root&lt;/span&gt;

    &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;
    &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;count:&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;contentItem:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Properties, signals and functions defined at the root level of a
component, together with derived members from the parent component, describe
the public interface of the component.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let's ignore default properties &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt; for now. They are useful but also a bit
dangerous. The other qualifiers, &lt;tt class="docutils literal"&gt;required&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;readonly&lt;/tt&gt; help us to build
robust interfaces.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;required&lt;/tt&gt; means we expect the user of this component to provide the
property value on instantiation. This is useful for declaring the component's
dependencies. For instance, a view that depends on its model would mark the
&lt;tt class="docutils literal"&gt;model&lt;/tt&gt; property as &lt;tt class="docutils literal"&gt;required&lt;/tt&gt;. The example above uses &lt;tt class="docutils literal"&gt;var&lt;/tt&gt; as the
model type, but it's good practice to restrict the model type to something
more concrete. A component cannot be instantiated unless all &lt;tt class="docutils literal"&gt;required&lt;/tt&gt;
properties are set up.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;readonly&lt;/tt&gt; makes a property's binding constant such that it cannot be
changed to another property binding nor overwritten by assignment. The active
update mechanism remains however. This is useful for exposing inner
dependencies to users of the component where our component shall remain in
control over the property.&lt;/li&gt;
&lt;li&gt;The third mode, when no qualifier is specified, can be used by properties that
we consider to be a read-write channel. Both the component itself and users of
the component can read or write to the property at any time. Look out for
those properties, as they become more difficult to reason about over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="masking-properties-for-improved-access-control"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;Masking properties for improved access control&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One case is missing though: What if we wanted to write to public properties
from the component itself but allow only restricted access from the outside? A
property that is partially &lt;tt class="docutils literal"&gt;readonly&lt;/tt&gt;, so to speak? There is no such
qualifier, but we can implement the semantics ourselves like so:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Control&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;id: root&lt;/span&gt;

    &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;page:&lt;/span&gt; &lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;

    &lt;span class="nx"&gt;QtObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;id: internal&lt;/span&gt;

        &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;
        &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;pageComponent:&lt;/span&gt; &lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;
            &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
            &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;"teal"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;Component.onCompleted:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The internal &lt;tt class="docutils literal"&gt;QtObject&lt;/tt&gt; is accessible through its &lt;tt class="docutils literal"&gt;id&lt;/tt&gt; identifier within
the component's scope. To the outside, the &lt;tt class="docutils literal"&gt;QtObject&lt;/tt&gt; is hidden and not
trivially accessible. With the use of an &lt;tt class="docutils literal"&gt;alias&lt;/tt&gt; property, we map internal
properties to a public read-only property. We've masked the internal property
with a &lt;tt class="docutils literal"&gt;readonly&lt;/tt&gt; property, thus providing restricted access to the same
&lt;tt class="docutils literal"&gt;page&lt;/tt&gt; instance.&lt;/p&gt;
&lt;p&gt;Attempts to write to the aliased property, either from within or the outside,
are disallowed by the QML engine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Invalid property assignment: "page" is a read-only property
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We've learned about property bindings in QML and how to build clean component
interfaces using (qualified) properties. Together, they allow us to decouple
components and encapsulate state or behaviour, which are major themes in
object-oriented programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In computer programming, suppose we have a data item A whose value
depends on data item B, i.e., the value of A must be changed after the value
of B changes and before the value of A becomes necessary. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Active_updating"&gt;(from Wikipedia)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://doc.qt.io/qt-6/qml-qtqml-binding.html"&gt;Binding QML type&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://doc.qt.io/qt-6/qtqml-syntax-objectattributes.html#default-properties"&gt;QML default property&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[4]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/mikhas/quick-licks-of-magic/tree/main/src/qml-properties"&gt;Code example on GitHub&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Starter Kit"></category><category term="QML"></category><category term="Properties"></category></entry><entry><title>How objects are constructed in QML</title><link href="https://quitemeticulouslogic.com/multi-phase-construction.html" rel="alternate"></link><published>2024-08-20T00:00:00+02:00</published><updated>2024-08-24T00:00:00+02:00</updated><author><name>Michael Hasselmann</name></author><id>tag:quitemeticulouslogic.com,2024-08-20:/multi-phase-construction.html</id><summary type="html">
&lt;div class="section" id="making-a-new-type"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Making a new type&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here's how you derive a new class from a base class in pure QML, with a public
API of two mandatory properties. They fill the role of constructor parameters:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt;

&lt;span class="nx"&gt;QtObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="nx"&gt;iconSource&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The name of the new class …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="making-a-new-type"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Making a new type&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here's how you derive a new class from a base class in pure QML, with a public
API of two mandatory properties. They fill the role of constructor parameters:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt;

&lt;span class="nx"&gt;QtObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="nx"&gt;iconSource&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The name of the new class, or QML component, is derived from the file name. So
if the file name is &lt;tt class="docutils literal"&gt;Derived.qml&lt;/tt&gt;, the new type will be available under
&lt;tt class="docutils literal"&gt;Derived&lt;/tt&gt;. This behaviour can be controlled in a special module file called
&lt;tt class="docutils literal"&gt;qmldir&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We can now instantiate our object from the component:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;"other/path/to/icon.png"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;QML object construction could be roughly translated to Python like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Derived&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/path/to/icon.png"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's unusual perhaps is that the constructor takes no arguments. Instead
&lt;tt class="docutils literal"&gt;amount&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;icon_path&lt;/tt&gt; are set on the object after instantiation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multi-phase-construction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Multi-phase construction&lt;/a&gt;&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;How the QML engine internally constructs objects is much more complicated.
The information presented here serves as a conceptual overview only.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the first phase of construction, the QML engine calls a hidden constructor and injects the &lt;tt class="docutils literal"&gt;parent&lt;/tt&gt;
argument. We can imagine the constructor to be defined like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Derived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have an instance of our &lt;tt class="docutils literal"&gt;Derived&lt;/tt&gt; component, but the properties that
we declared as required aren't initialised just yet. The QML engine would
complain with a fatal error if we tried to use the instance in this state.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;parent&lt;/tt&gt; points to the object that will take ownership over this new
object. In QML, this parent-child relationship is commonly expressed through
nesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;          &lt;span class="c1"&gt;// owns the Child instance&lt;/span&gt;
    &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// `parent` property will refer to Parent instance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the second phase, the initial state of the new object is set up. This
happens by evaluating the expressions that are bound to the properties, as we
already saw:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;"other/path/to/icon.png"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Evaluation happens property by property and in random order. This has far
reaching consequences! Properties can depend on other properties and the QML
engine will try its best to resolve the dependencies. It's up to the developer
however to prevent circular dependencies:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iconSource&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// Don't #1
&lt;/span&gt;    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;png&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="c1"&gt;// Don't #2
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The QML engine cannot resolve this. Individually, each property and their
dependency on the other property would be fine. Combined however, this spells
doom and we'll be greeted by the infamous binding loop warning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;QML Derived: Binding loop detected for property "amount"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not all binding loops can be detected by the engine. When that happens, the
application will either hang or crash.&lt;/p&gt;
&lt;p&gt;In the third phase, when all bound property expressions have been evaluated
once, &lt;tt class="docutils literal"&gt;Component.onCompleted&lt;/tt&gt; will be called. This allows us to run code
after the object has been constructed but before it'll be used by others.&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;"other/path/to/icon.png"&lt;/span&gt;

    &lt;span class="k"&gt;Component.onCompleted:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;"${iconSource}"&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can also attach new properties to an existing type:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="k"&gt;label:&lt;/span&gt; &lt;span class="s2"&gt;"A new property"&lt;/span&gt;

    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;"path/to/icon.png"&lt;/span&gt;

    &lt;span class="k"&gt;Component.onCompleted:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;label:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This triggers an additional construction phase: Because of the new property,
the QML engine has to derive a new implicit type from our original &lt;tt class="docutils literal"&gt;Derived&lt;/tt&gt;
component. This new type contains the injected &lt;tt class="docutils literal"&gt;label&lt;/tt&gt; property. As a new
type, it also has its own &lt;tt class="docutils literal"&gt;Component.onCompleted&lt;/tt&gt; handler which will run
after &lt;tt class="docutils literal"&gt;label&lt;/tt&gt; has been evaluated once.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recursive-construction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Recursive construction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is not guaranteed that all construction phases run one after another. For
instance, object &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; could be created before object &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;, but properties
will be evaluated for &lt;tt class="docutils literal"&gt;B&lt;/tt&gt; before &lt;tt class="docutils literal"&gt;A&lt;/tt&gt;'s property are checked. Therefore,
&lt;tt class="docutils literal"&gt;B&lt;/tt&gt; could reach full initialisation before &lt;tt class="docutils literal"&gt;A&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In the general case, innermost objects will be constructed before the other
objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Ancestor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// last to be fully constructed&lt;/span&gt;
    &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// second to be fully constructed&lt;/span&gt;
        &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// first to be fully construced&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a typical QML application with a graphical interface, the outermost object
would be the &lt;tt class="docutils literal"&gt;ApplicationWindow&lt;/tt&gt;, so it'ill be constructed last. The
recursive construction spans all components nested within, with each component
following the multi-phase construction process.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Starter Kit"></category><category term="QML"></category></entry><entry><title>Launching your QML application from Python</title><link href="https://quitemeticulouslogic.com/launch-qml-from-python.html" rel="alternate"></link><published>2024-08-19T00:00:00+02:00</published><updated>2024-08-26T00:00:00+02:00</updated><author><name>Michael Hasselmann</name></author><id>tag:quitemeticulouslogic.com,2024-08-19:/launch-qml-from-python.html</id><summary type="html">
&lt;div class="section" id="installing-pyside6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Installing PySide6&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;path/to/my/project
$&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;env
$&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;./env/bin/activate
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;PySide6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it! You now have the officially endorsed Python bindings &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; which
include everything we'll need to start:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Qt framework, wrapped in a Python API,&lt;/li&gt;
&lt;li&gt;QML, a declarative language that feels …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="installing-pyside6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Installing PySide6&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;path/to/my/project
$&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;env
$&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;./env/bin/activate
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;PySide6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it! You now have the officially endorsed Python bindings &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; which
include everything we'll need to start:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Qt framework, wrapped in a Python API,&lt;/li&gt;
&lt;li&gt;QML, a declarative language that feels as if HTML, CSS and JavaScript had all
been rolled into one compelling package,&lt;/li&gt;
&lt;li&gt;QtQuick Components, a Qt Widgets alternative for QML.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-the-entry-points"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Defining the entry points&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Combining Python and QML requires us to define several entry points:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;One for the Python interpreter,&lt;/li&gt;
&lt;li&gt;one for the Qt framework,&lt;/li&gt;
&lt;li&gt;and one for QML.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For Python, we set the entry point like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Qt, we need to initialize the framework and then kick off the main loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QGuiApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For QML, we create the engine and point it to the component it should load as
its root element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QQmlApplicationEngine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadFromModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"MyApp.UI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Main"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the full launcher script (&lt;tt class="docutils literal"&gt;main.py&lt;/tt&gt;), with code comments:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ln"&gt; 1 &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 2 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fspath&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 3 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 4 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 5 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 6 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide6.QtQml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QQmlApplicationEngine&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 7 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide6.QtCore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 8 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide6.QtGui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QGuiApplication&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt; 9 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PySide6.QtQuickControls2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QQuickStyle&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;10 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;11 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;12 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;13 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Shuts down the app when pressing Ctrl-C in the terminal.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;14 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# For proper handling, check matplotlib's `_allow_interrupt(...)`&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;15 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# implementation.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;16 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;17 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;18 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# We need to set the style early, or else the engine complains.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;19 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;QQuickStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Universal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;20 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;21 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Also parses Qt-specific command line arguments.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;22 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QGuiApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;23 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# The engine is responsible for executing QML code.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;24 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QQmlApplicationEngine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;25 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objectCreationFailed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Qt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueuedConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;26 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Search for QML modules in the same directory as our `main.py`.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;27 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addImportPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;28 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# The module name "MyApp.UI" is translated into a path.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;29 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# "Main" is defined in "MyApp/UI/Main.qml" and will be loaded as the&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;30 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# engine's root element.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;31 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadFromModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"MyApp.UI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Main"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;32 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;33 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Yield control from the Python interpreter to the Qt event loop.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;34 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;35 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;36 &lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;37 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="ln"&gt;38 &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This allows us to run the app from the command line like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;main.py
QQmlApplicationEngine&lt;span class="w"&gt; &lt;/span&gt;failed&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;load&lt;span class="w"&gt; &lt;/span&gt;component
&amp;lt;Unknown&lt;span class="w"&gt; &lt;/span&gt;File&amp;gt;:&lt;span class="w"&gt; &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;module&lt;span class="w"&gt; &lt;/span&gt;named&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MyApp.UI"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;found
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Python interpreter complains about the missing QML module. Let's fix that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;MyApp/UI
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;MyApp/UI/qmldir
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;MyApp/UI/Main.qml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;qmldir&lt;/tt&gt; is QML's way of declaring modules &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;. In that file, we list every
QML file belonging to the module. Each QML module requires its own &lt;tt class="docutils literal"&gt;qmldir&lt;/tt&gt;.
One QML module can span across multiple (sub-) directories.&lt;/p&gt;
&lt;p&gt;In our case, the module contains a single file, &lt;tt class="docutils literal"&gt;Main.qml&lt;/tt&gt;, but we need to
map it to its component name, which is just &lt;tt class="docutils literal"&gt;Main&lt;/tt&gt;. We could have chosen
other names but &lt;tt class="docutils literal"&gt;Main&lt;/tt&gt; fits the theme of defining entry points.&lt;/p&gt;
&lt;p&gt;Here's our &lt;tt class="docutils literal"&gt;MyApp/UI/qmldir&lt;/tt&gt; file:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="ln"&gt;1 &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UI&lt;/span&gt;
&lt;span class="ln"&gt;2 &lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;qml&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;1.0&lt;/tt&gt; is the version of the component. QtQuick Components make heavy use of
that feature, but app developers can safely ignore it and just always keep the
initial version for their own components.&lt;/p&gt;
&lt;p&gt;We now know what QML modules are and how to point to them from Python. We've
also seen the majority of what QML modules have to offer, and why &lt;tt class="docutils literal"&gt;qmldir&lt;/tt&gt;
files exist.&lt;/p&gt;
&lt;p&gt;Anyway, let's try running our app again!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;main.py
QQmlApplicationEngine&lt;span class="w"&gt; &lt;/span&gt;failed&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;load&lt;span class="w"&gt; &lt;/span&gt;component
file:///full/path/to/my/project/MyApp/UI/Main.qml:&lt;span class="w"&gt; &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;empty
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Despite the new error message, we should notice that the QML engine got much
farther this time: It found the module, read the &lt;tt class="docutils literal"&gt;qmldir&lt;/tt&gt; and loaded
&lt;tt class="docutils literal"&gt;Main.qml&lt;/tt&gt; as it expects to find the definition of the &lt;tt class="docutils literal"&gt;Main&lt;/tt&gt; component in
there. But empty QML files make no valid components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-applicationwindow"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;The ApplicationWindow&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The root element of your QML app should almost always be the
&lt;tt class="docutils literal"&gt;ApplicationWindow&lt;/tt&gt; &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt; itself. Here's our &lt;tt class="docutils literal"&gt;Main.qml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="ln"&gt; 1 &lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt;
&lt;span class="ln"&gt; 2 &lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Controls&lt;/span&gt;
&lt;span class="ln"&gt; 3 &lt;/span&gt;
&lt;span class="ln"&gt; 4 &lt;/span&gt;
&lt;span class="ln"&gt; 5 &lt;/span&gt;&lt;span class="nx"&gt;ApplicationWindow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="ln"&gt; 6 &lt;/span&gt;    &lt;span class="kd"&gt;id: root&lt;/span&gt;
&lt;span class="ln"&gt; 7 &lt;/span&gt;
&lt;span class="ln"&gt; 8 &lt;/span&gt;    &lt;span class="k"&gt;title:&lt;/span&gt; &lt;span class="s2"&gt;"My first QML app"&lt;/span&gt;
&lt;span class="ln"&gt; 9 &lt;/span&gt;    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;
&lt;span class="ln"&gt;10 &lt;/span&gt;    &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;
&lt;span class="ln"&gt;11 &lt;/span&gt;    &lt;span class="c1"&gt;// Everybody forgets to set `visible` to `true` the first time. Right, Trin?
&lt;/span&gt;&lt;span class="ln"&gt;12 &lt;/span&gt;&lt;span class="c1"&gt;&lt;/span&gt;    &lt;span class="k"&gt;visible:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="ln"&gt;13 &lt;/span&gt;
&lt;span class="ln"&gt;14 &lt;/span&gt;    &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="ln"&gt;15 &lt;/span&gt;        &lt;span class="k"&gt;anchors.centerIn:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
&lt;span class="ln"&gt;16 &lt;/span&gt;        &lt;span class="k"&gt;text:&lt;/span&gt; &lt;span class="s2"&gt;"It works! Our application window size is "&lt;/span&gt;
&lt;span class="ln"&gt;17 &lt;/span&gt;            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nx"&gt;x$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="ln"&gt;18 &lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="ln"&gt;19 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Launching the app should now look similar to this:&lt;/p&gt;
&lt;img alt="Screenshot of the application's main window" src="https://quitemeticulouslogic.com/images/app-template/it-works.png"/&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;text&lt;/tt&gt; property inside the &lt;tt class="docutils literal"&gt;Text&lt;/tt&gt; component uses a mix of static text
and dynamically computed text. Resize the window to see the text update in
real-time.&lt;/p&gt;
&lt;p&gt;We haven't added a real Python backend yet, nor have we created a practical
layout for extending the UI. We do however have a robust app template &lt;a class="footnote-reference" href="#footnote-4" id="footnote-reference-4"&gt;[4]&lt;/a&gt; with
an extendable project structure and can start experimenting with QML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://doc.qt.io/qtforpython-6/"&gt;Qt for Python&lt;/a&gt; mainly focuses on Qt Widget applications whereas we focus on QML&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;qmldir: &lt;a class="reference external" href="https://doc.qt.io/qt-6/qtqml-modules-qmldir.html"&gt;module definition file&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;QML's &lt;a class="reference external" href="https://doc.qt.io/qt-6/qml-qtquick-controls-applicationwindow.html"&gt;ApplicationWindow&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;a class="reference external" href="https://quitemeticulouslogic.com/src/app-template.zip"&gt;app template&lt;/a&gt; used in this blog post&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[5]&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/mikhas/quick-licks-of-magic/tree/main/src/app-template"&gt;Code example on GitHub&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Starter Kit"></category><category term="QML"></category><category term="PySide6"></category><category term="qmldir"></category><category term="ApplicationWindow"></category></entry></feed>